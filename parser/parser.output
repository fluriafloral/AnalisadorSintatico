Terminals unused in grammar

   WHILE
   DO
   ELSE


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: /* empty */
    3      | stmt stmts

    4 stmt: assign
    5     | if

    6 if: IF logicExps '{' stmts '}'

    7 logicExps: '(' logicExps ')'
    8          | logicExp
    9          | logicExps OR logicExp
   10          | logicExps AND logicExp

   11 logicExp: NOT id
   12         | id EQUALS id
   13         | id NOT_EQUALS id
   14         | id GREATER_THAN id
   15         | id GREATER_THAN_OR_EQUALS_TO id
   16         | id LESS_THAN id
   17         | id LESS_THAN_OR_EQUALS_TO id

   18 assign: VAR ID ':' TYPE ASSIGN id ';'

   19 id: literal_string
   20   | literal_integer
   21   | literal_float

   22 literal_string: STRING

   23 literal_integer: INTEGER

   24 literal_float: FLOAT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7
')' (41) 7
':' (58) 18
';' (59) 18
'{' (123) 6
'}' (125) 6
error (256)
ID (258) 18
TYPE (259) 18
VAR (260) 18
STRING (261) 22
INTEGER (262) 23
FLOAT (263) 24
EQUALS (264) 12
NOT (265) 11
NOT_EQUALS (266) 13
LESS_THAN (267) 16
LESS_THAN_OR_EQUALS_TO (268) 17
GREATER_THAN (269) 14
GREATER_THAN_OR_EQUALS_TO (270) 15
OR (271) 9
AND (272) 10
WHILE (273)
DO (274)
IF (275) 6
ELSE (276)
ASSIGN (277) 18


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
program (30)
    on left: 1, on right: 0
stmts (31)
    on left: 2 3, on right: 1 3 6
stmt (32)
    on left: 4 5, on right: 3
if (33)
    on left: 6, on right: 5
logicExps (34)
    on left: 7 8 9 10, on right: 6 7 9 10
logicExp (35)
    on left: 11 12 13 14 15 16 17, on right: 8 9 10
assign (36)
    on left: 18, on right: 4
id (37)
    on left: 19 20 21, on right: 11 12 13 14 15 16 17 18
literal_string (38)
    on left: 22, on right: 19
literal_integer (39)
    on left: 23, on right: 20
literal_float (40)
    on left: 24, on right: 21


state 0

    0 $accept: . program $end

    VAR  shift, and go to state 1
    IF   shift, and go to state 2

    $default  reduce using rule 2 (stmts)

    program  go to state 3
    stmts    go to state 4
    stmt     go to state 5
    if       go to state 6
    assign   go to state 7


state 1

   18 assign: VAR . ID ':' TYPE ASSIGN id ';'

    ID  shift, and go to state 8


state 2

    6 if: IF . logicExps '{' stmts '}'

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11
    NOT      shift, and go to state 12
    '('      shift, and go to state 13

    logicExps        go to state 14
    logicExp         go to state 15
    id               go to state 16
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 3

    0 $accept: program . $end

    $end  shift, and go to state 20


state 4

    1 program: stmts .

    $default  reduce using rule 1 (program)


state 5

    3 stmts: stmt . stmts

    VAR  shift, and go to state 1
    IF   shift, and go to state 2

    $default  reduce using rule 2 (stmts)

    stmts   go to state 21
    stmt    go to state 5
    if      go to state 6
    assign  go to state 7


state 6

    5 stmt: if .

    $default  reduce using rule 5 (stmt)


state 7

    4 stmt: assign .

    $default  reduce using rule 4 (stmt)


state 8

   18 assign: VAR ID . ':' TYPE ASSIGN id ';'

    ':'  shift, and go to state 22


state 9

   22 literal_string: STRING .

    $default  reduce using rule 22 (literal_string)


state 10

   23 literal_integer: INTEGER .

    $default  reduce using rule 23 (literal_integer)


state 11

   24 literal_float: FLOAT .

    $default  reduce using rule 24 (literal_float)


state 12

   11 logicExp: NOT . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 23
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 13

    7 logicExps: '(' . logicExps ')'

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11
    NOT      shift, and go to state 12
    '('      shift, and go to state 13

    logicExps        go to state 24
    logicExp         go to state 15
    id               go to state 16
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 14

    6 if: IF logicExps . '{' stmts '}'
    9 logicExps: logicExps . OR logicExp
   10          | logicExps . AND logicExp

    OR   shift, and go to state 25
    AND  shift, and go to state 26
    '{'  shift, and go to state 27


state 15

    8 logicExps: logicExp .

    $default  reduce using rule 8 (logicExps)


state 16

   12 logicExp: id . EQUALS id
   13         | id . NOT_EQUALS id
   14         | id . GREATER_THAN id
   15         | id . GREATER_THAN_OR_EQUALS_TO id
   16         | id . LESS_THAN id
   17         | id . LESS_THAN_OR_EQUALS_TO id

    EQUALS                     shift, and go to state 28
    NOT_EQUALS                 shift, and go to state 29
    LESS_THAN                  shift, and go to state 30
    LESS_THAN_OR_EQUALS_TO     shift, and go to state 31
    GREATER_THAN               shift, and go to state 32
    GREATER_THAN_OR_EQUALS_TO  shift, and go to state 33


state 17

   19 id: literal_string .

    $default  reduce using rule 19 (id)


state 18

   20 id: literal_integer .

    $default  reduce using rule 20 (id)


state 19

   21 id: literal_float .

    $default  reduce using rule 21 (id)


state 20

    0 $accept: program $end .

    $default  accept


state 21

    3 stmts: stmt stmts .

    $default  reduce using rule 3 (stmts)


state 22

   18 assign: VAR ID ':' . TYPE ASSIGN id ';'

    TYPE  shift, and go to state 34


state 23

   11 logicExp: NOT id .

    $default  reduce using rule 11 (logicExp)


state 24

    7 logicExps: '(' logicExps . ')'
    9          | logicExps . OR logicExp
   10          | logicExps . AND logicExp

    OR   shift, and go to state 25
    AND  shift, and go to state 26
    ')'  shift, and go to state 35


state 25

    9 logicExps: logicExps OR . logicExp

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11
    NOT      shift, and go to state 12

    logicExp         go to state 36
    id               go to state 16
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 26

   10 logicExps: logicExps AND . logicExp

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11
    NOT      shift, and go to state 12

    logicExp         go to state 37
    id               go to state 16
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 27

    6 if: IF logicExps '{' . stmts '}'

    VAR  shift, and go to state 1
    IF   shift, and go to state 2

    $default  reduce using rule 2 (stmts)

    stmts   go to state 38
    stmt    go to state 5
    if      go to state 6
    assign  go to state 7


state 28

   12 logicExp: id EQUALS . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 39
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 29

   13 logicExp: id NOT_EQUALS . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 40
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 30

   16 logicExp: id LESS_THAN . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 41
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 31

   17 logicExp: id LESS_THAN_OR_EQUALS_TO . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 42
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 32

   14 logicExp: id GREATER_THAN . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 43
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 33

   15 logicExp: id GREATER_THAN_OR_EQUALS_TO . id

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 44
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 34

   18 assign: VAR ID ':' TYPE . ASSIGN id ';'

    ASSIGN  shift, and go to state 45


state 35

    7 logicExps: '(' logicExps ')' .

    $default  reduce using rule 7 (logicExps)


state 36

    9 logicExps: logicExps OR logicExp .

    $default  reduce using rule 9 (logicExps)


state 37

   10 logicExps: logicExps AND logicExp .

    $default  reduce using rule 10 (logicExps)


state 38

    6 if: IF logicExps '{' stmts . '}'

    '}'  shift, and go to state 46


state 39

   12 logicExp: id EQUALS id .

    $default  reduce using rule 12 (logicExp)


state 40

   13 logicExp: id NOT_EQUALS id .

    $default  reduce using rule 13 (logicExp)


state 41

   16 logicExp: id LESS_THAN id .

    $default  reduce using rule 16 (logicExp)


state 42

   17 logicExp: id LESS_THAN_OR_EQUALS_TO id .

    $default  reduce using rule 17 (logicExp)


state 43

   14 logicExp: id GREATER_THAN id .

    $default  reduce using rule 14 (logicExp)


state 44

   15 logicExp: id GREATER_THAN_OR_EQUALS_TO id .

    $default  reduce using rule 15 (logicExp)


state 45

   18 assign: VAR ID ':' TYPE ASSIGN . id ';'

    STRING   shift, and go to state 9
    INTEGER  shift, and go to state 10
    FLOAT    shift, and go to state 11

    id               go to state 47
    literal_string   go to state 17
    literal_integer  go to state 18
    literal_float    go to state 19


state 46

    6 if: IF logicExps '{' stmts '}' .

    $default  reduce using rule 6 (if)


state 47

   18 assign: VAR ID ':' TYPE ASSIGN id . ';'

    ';'  shift, and go to state 48


state 48

   18 assign: VAR ID ':' TYPE ASSIGN id ';' .

    $default  reduce using rule 18 (assign)
