digraph Automaton {
  0 [label="0\n$accept -> . prog $end"]
  0 -> 1 [style=solid label="ID"]
  0 -> 2 [style=solid label="VAR"]
  0 -> 3 [style=solid label="WHILE"]
  0 -> 4 [style=solid label="FOR"]
  0 -> 5 [style=solid label="IF"]
  0 -> 6 [style=solid label="FUNC"]
  0 -> 7 [style=solid label="RETURN"]
  0 -> 8 [style=solid label="PRINT"]
  0 -> 9 [style=dashed label="prog"]
  0 -> 10 [style=dashed label="subprograms"]
  0 -> 11 [style=dashed label="subprogram"]
  0 -> 12 [style=dashed label="stms"]
  0 -> 13 [style=dashed label="stm"]
  0 -> 14 [style=dashed label="print_stm"]
  0 -> 15 [style=dashed label="init"]
  0 -> 16 [style=dashed label="assign"]
  0 -> 17 [style=dashed label="return"]
  0 -> 18 [style=dashed label="if_stm"]
  0 -> 19 [style=dashed label="func_stm"]
  0 -> 20 [style=dashed label="for_stm"]
  0 -> 21 [style=dashed label="while_stm"]
  1 [label="1\nassign -> ID . ADDITION_AND_ASSIGN exprs END\nassign -> ID . LEFT_BRACKET exprs RIGHT_BRACKET ASSIGN expr END\nassign -> ID . ASSIGN exprs END\nassign -> ID . SUBTRACTION_AND_ASSIGN exprs END\nassign -> ID . MULTIPLICATION_AND_ASSIGN exprs END\nassign -> ID . DIVISION_AND_ASSIGN exprs END\nassign -> ID . REMAINDER_AND_ASSIGN exprs END"]
  1 -> 22 [style=solid label="ASSIGN"]
  1 -> 23 [style=solid label="ADDITION_AND_ASSIGN"]
  1 -> 24 [style=solid label="SUBTRACTION_AND_ASSIGN"]
  1 -> 25 [style=solid label="MULTIPLICATION_AND_ASSIGN"]
  1 -> 26 [style=solid label="DIVISION_AND_ASSIGN"]
  1 -> 27 [style=solid label="REMAINDER_AND_ASSIGN"]
  1 -> 28 [style=solid label="LEFT_BRACKET"]
  2 [label="2\ninit -> VAR . ID type ASSIGN exprs END\ninit -> VAR . ID type ASSIGN LEFT_BRACKET index RIGHT_BRACKET END"]
  2 -> 29 [style=solid label="ID"]
  3 [label="3\nwhile_stm -> WHILE . logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  3 -> 30 [style=solid label="ID"]
  3 -> 31 [style=solid label="SHORT"]
  3 -> 32 [style=solid label="INTEGER"]
  3 -> 33 [style=solid label="LONG"]
  3 -> 34 [style=solid label="FLOAT"]
  3 -> 35 [style=solid label="DOUBLE"]
  3 -> 36 [style=solid label="STRING"]
  3 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  3 -> 38 [style=solid label="NOT"]
  3 -> 39 [style=dashed label="logicExprs"]
  3 -> 40 [style=dashed label="logicExpr"]
  3 -> 41 [style=dashed label="expr"]
  3 -> 42 [style=dashed label="invoke"]
  3 -> 43 [style=dashed label="primitive"]
  4 [label="4\nfor_stm -> FOR . LEFT_PARENTHESIS init logicExprs END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  4 -> 44 [style=solid label="LEFT_PARENTHESIS"]
  5 [label="5\nif_stm -> IF . logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET\nif_stm -> IF . logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  5 -> 30 [style=solid label="ID"]
  5 -> 31 [style=solid label="SHORT"]
  5 -> 32 [style=solid label="INTEGER"]
  5 -> 33 [style=solid label="LONG"]
  5 -> 34 [style=solid label="FLOAT"]
  5 -> 35 [style=solid label="DOUBLE"]
  5 -> 36 [style=solid label="STRING"]
  5 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  5 -> 38 [style=solid label="NOT"]
  5 -> 45 [style=dashed label="logicExprs"]
  5 -> 40 [style=dashed label="logicExpr"]
  5 -> 41 [style=dashed label="expr"]
  5 -> 42 [style=dashed label="invoke"]
  5 -> 43 [style=dashed label="primitive"]
  6 [label="6\nfunc_stm -> FUNC . ID LEFT_PARENTHESIS assign_params RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  6 -> 46 [style=solid label="ID"]
  7 [label="7\nreturn -> RETURN . exprs END"]
  7 -> 30 [style=solid label="ID"]
  7 -> 31 [style=solid label="SHORT"]
  7 -> 32 [style=solid label="INTEGER"]
  7 -> 33 [style=solid label="LONG"]
  7 -> 34 [style=solid label="FLOAT"]
  7 -> 35 [style=solid label="DOUBLE"]
  7 -> 36 [style=solid label="STRING"]
  7 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  7 -> 48 [style=dashed label="exprs"]
  7 -> 49 [style=dashed label="expr"]
  7 -> 42 [style=dashed label="invoke"]
  7 -> 43 [style=dashed label="primitive"]
  8 [label="8\nprint_stm -> PRINT . LEFT_PARENTHESIS exprs RIGHT_PARENTHESIS END"]
  8 -> 50 [style=solid label="LEFT_PARENTHESIS"]
  9 [label="9\n$accept -> prog . $end"]
  9 -> 51 [style=solid label="$end"]
  10 [label="10\nprog -> subprograms ."]
  11 [label="11\nsubprograms -> subprogram .\nsubprograms -> subprogram . subprograms"]
  11 -> 1 [style=solid label="ID"]
  11 -> 2 [style=solid label="VAR"]
  11 -> 3 [style=solid label="WHILE"]
  11 -> 4 [style=solid label="FOR"]
  11 -> 5 [style=solid label="IF"]
  11 -> 6 [style=solid label="FUNC"]
  11 -> 7 [style=solid label="RETURN"]
  11 -> 8 [style=solid label="PRINT"]
  11 -> 52 [style=dashed label="subprograms"]
  11 -> 11 [style=dashed label="subprogram"]
  11 -> 12 [style=dashed label="stms"]
  11 -> 13 [style=dashed label="stm"]
  11 -> 14 [style=dashed label="print_stm"]
  11 -> 15 [style=dashed label="init"]
  11 -> 16 [style=dashed label="assign"]
  11 -> 17 [style=dashed label="return"]
  11 -> 18 [style=dashed label="if_stm"]
  11 -> 19 [style=dashed label="func_stm"]
  11 -> 20 [style=dashed label="for_stm"]
  11 -> 21 [style=dashed label="while_stm"]
  12 [label="12\nsubprogram -> stms ."]
  13 [label="13\nstms -> stm .\nstms -> stm . stms"]
  13 -> 1 [style=solid label="ID"]
  13 -> 2 [style=solid label="VAR"]
  13 -> 3 [style=solid label="WHILE"]
  13 -> 4 [style=solid label="FOR"]
  13 -> 5 [style=solid label="IF"]
  13 -> 6 [style=solid label="FUNC"]
  13 -> 7 [style=solid label="RETURN"]
  13 -> 8 [style=solid label="PRINT"]
  13 -> 53 [style=dashed label="stms"]
  13 -> 13 [style=dashed label="stm"]
  13 -> 14 [style=dashed label="print_stm"]
  13 -> 15 [style=dashed label="init"]
  13 -> 16 [style=dashed label="assign"]
  13 -> 17 [style=dashed label="return"]
  13 -> 18 [style=dashed label="if_stm"]
  13 -> 19 [style=dashed label="func_stm"]
  13 -> 20 [style=dashed label="for_stm"]
  13 -> 21 [style=dashed label="while_stm"]
  14 [label="14\nstm -> print_stm ."]
  15 [label="15\nstm -> init ."]
  16 [label="16\nstm -> assign ."]
  17 [label="17\nstm -> return ."]
  18 [label="18\nstm -> if_stm ."]
  19 [label="19\nstm -> func_stm ."]
  20 [label="20\nstm -> for_stm ."]
  21 [label="21\nstm -> while_stm ."]
  22 [label="22\nassign -> ID ASSIGN . exprs END"]
  22 -> 30 [style=solid label="ID"]
  22 -> 31 [style=solid label="SHORT"]
  22 -> 32 [style=solid label="INTEGER"]
  22 -> 33 [style=solid label="LONG"]
  22 -> 34 [style=solid label="FLOAT"]
  22 -> 35 [style=solid label="DOUBLE"]
  22 -> 36 [style=solid label="STRING"]
  22 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  22 -> 54 [style=dashed label="exprs"]
  22 -> 49 [style=dashed label="expr"]
  22 -> 42 [style=dashed label="invoke"]
  22 -> 43 [style=dashed label="primitive"]
  23 [label="23\nassign -> ID ADDITION_AND_ASSIGN . exprs END"]
  23 -> 30 [style=solid label="ID"]
  23 -> 31 [style=solid label="SHORT"]
  23 -> 32 [style=solid label="INTEGER"]
  23 -> 33 [style=solid label="LONG"]
  23 -> 34 [style=solid label="FLOAT"]
  23 -> 35 [style=solid label="DOUBLE"]
  23 -> 36 [style=solid label="STRING"]
  23 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  23 -> 55 [style=dashed label="exprs"]
  23 -> 49 [style=dashed label="expr"]
  23 -> 42 [style=dashed label="invoke"]
  23 -> 43 [style=dashed label="primitive"]
  24 [label="24\nassign -> ID SUBTRACTION_AND_ASSIGN . exprs END"]
  24 -> 30 [style=solid label="ID"]
  24 -> 31 [style=solid label="SHORT"]
  24 -> 32 [style=solid label="INTEGER"]
  24 -> 33 [style=solid label="LONG"]
  24 -> 34 [style=solid label="FLOAT"]
  24 -> 35 [style=solid label="DOUBLE"]
  24 -> 36 [style=solid label="STRING"]
  24 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  24 -> 56 [style=dashed label="exprs"]
  24 -> 49 [style=dashed label="expr"]
  24 -> 42 [style=dashed label="invoke"]
  24 -> 43 [style=dashed label="primitive"]
  25 [label="25\nassign -> ID MULTIPLICATION_AND_ASSIGN . exprs END"]
  25 -> 30 [style=solid label="ID"]
  25 -> 31 [style=solid label="SHORT"]
  25 -> 32 [style=solid label="INTEGER"]
  25 -> 33 [style=solid label="LONG"]
  25 -> 34 [style=solid label="FLOAT"]
  25 -> 35 [style=solid label="DOUBLE"]
  25 -> 36 [style=solid label="STRING"]
  25 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  25 -> 57 [style=dashed label="exprs"]
  25 -> 49 [style=dashed label="expr"]
  25 -> 42 [style=dashed label="invoke"]
  25 -> 43 [style=dashed label="primitive"]
  26 [label="26\nassign -> ID DIVISION_AND_ASSIGN . exprs END"]
  26 -> 30 [style=solid label="ID"]
  26 -> 31 [style=solid label="SHORT"]
  26 -> 32 [style=solid label="INTEGER"]
  26 -> 33 [style=solid label="LONG"]
  26 -> 34 [style=solid label="FLOAT"]
  26 -> 35 [style=solid label="DOUBLE"]
  26 -> 36 [style=solid label="STRING"]
  26 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  26 -> 58 [style=dashed label="exprs"]
  26 -> 49 [style=dashed label="expr"]
  26 -> 42 [style=dashed label="invoke"]
  26 -> 43 [style=dashed label="primitive"]
  27 [label="27\nassign -> ID REMAINDER_AND_ASSIGN . exprs END"]
  27 -> 30 [style=solid label="ID"]
  27 -> 31 [style=solid label="SHORT"]
  27 -> 32 [style=solid label="INTEGER"]
  27 -> 33 [style=solid label="LONG"]
  27 -> 34 [style=solid label="FLOAT"]
  27 -> 35 [style=solid label="DOUBLE"]
  27 -> 36 [style=solid label="STRING"]
  27 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  27 -> 59 [style=dashed label="exprs"]
  27 -> 49 [style=dashed label="expr"]
  27 -> 42 [style=dashed label="invoke"]
  27 -> 43 [style=dashed label="primitive"]
  28 [label="28\nassign -> ID LEFT_BRACKET . exprs RIGHT_BRACKET ASSIGN expr END"]
  28 -> 30 [style=solid label="ID"]
  28 -> 31 [style=solid label="SHORT"]
  28 -> 32 [style=solid label="INTEGER"]
  28 -> 33 [style=solid label="LONG"]
  28 -> 34 [style=solid label="FLOAT"]
  28 -> 35 [style=solid label="DOUBLE"]
  28 -> 36 [style=solid label="STRING"]
  28 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  28 -> 60 [style=dashed label="exprs"]
  28 -> 49 [style=dashed label="expr"]
  28 -> 42 [style=dashed label="invoke"]
  28 -> 43 [style=dashed label="primitive"]
  29 [label="29\ninit -> VAR ID . type ASSIGN exprs END\ninit -> VAR ID . type ASSIGN LEFT_BRACKET index RIGHT_BRACKET END"]
  29 -> 61 [style=solid label="COLON"]
  29 -> 62 [style=dashed label="type"]
  30 [label="30\nexpr -> ID .\nexpr -> ID . dims\ninvoke -> ID . LEFT_PARENTHESIS params RIGHT_PARENTHESIS"]
  30 -> 63 [style=solid label="LEFT_PARENTHESIS"]
  30 -> 64 [style=solid label="LEFT_BRACKET"]
  30 -> 65 [style=dashed label="dims"]
  30 -> 66 [style=dashed label="dim"]
  31 [label="31\nprimitive -> SHORT ."]
  32 [label="32\nprimitive -> INTEGER ."]
  33 [label="33\nprimitive -> LONG ."]
  34 [label="34\nprimitive -> FLOAT ."]
  35 [label="35\nprimitive -> DOUBLE ."]
  36 [label="36\nprimitive -> STRING ."]
  37 [label="37\nlogicExpr -> LEFT_PARENTHESIS . logicExprs RIGHT_PARENTHESIS\nexpr -> LEFT_PARENTHESIS . exprs RIGHT_PARENTHESIS"]
  37 -> 30 [style=solid label="ID"]
  37 -> 31 [style=solid label="SHORT"]
  37 -> 32 [style=solid label="INTEGER"]
  37 -> 33 [style=solid label="LONG"]
  37 -> 34 [style=solid label="FLOAT"]
  37 -> 35 [style=solid label="DOUBLE"]
  37 -> 36 [style=solid label="STRING"]
  37 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  37 -> 38 [style=solid label="NOT"]
  37 -> 67 [style=dashed label="logicExprs"]
  37 -> 40 [style=dashed label="logicExpr"]
  37 -> 68 [style=dashed label="exprs"]
  37 -> 69 [style=dashed label="expr"]
  37 -> 42 [style=dashed label="invoke"]
  37 -> 43 [style=dashed label="primitive"]
  38 [label="38\nlogicExprs -> NOT . logicExprs"]
  38 -> 30 [style=solid label="ID"]
  38 -> 31 [style=solid label="SHORT"]
  38 -> 32 [style=solid label="INTEGER"]
  38 -> 33 [style=solid label="LONG"]
  38 -> 34 [style=solid label="FLOAT"]
  38 -> 35 [style=solid label="DOUBLE"]
  38 -> 36 [style=solid label="STRING"]
  38 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  38 -> 38 [style=solid label="NOT"]
  38 -> 70 [style=dashed label="logicExprs"]
  38 -> 40 [style=dashed label="logicExpr"]
  38 -> 41 [style=dashed label="expr"]
  38 -> 42 [style=dashed label="invoke"]
  38 -> 43 [style=dashed label="primitive"]
  39 [label="39\nwhile_stm -> WHILE logicExprs . LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  39 -> 71 [style=solid label="LEFT_CURLYBRACKET"]
  40 [label="40\nlogicExprs -> logicExpr . AND logicExprs\nlogicExprs -> logicExpr . OR logicExprs\nlogicExprs -> logicExpr ."]
  40 -> 72 [style=solid label="OR"]
  40 -> 73 [style=solid label="AND"]
  41 [label="41\nlogicExpr -> expr . EQUALS expr\nlogicExpr -> expr . NOT_EQUALS expr\nlogicExpr -> expr . GREATER_THAN expr\nlogicExpr -> expr . GREATER_THAN_OR_EQUALS_TO expr\nlogicExpr -> expr . LESS_THAN expr\nlogicExpr -> expr . LESS_THAN_OR_EQUALS_TO expr"]
  41 -> 74 [style=solid label="EQUALS"]
  41 -> 75 [style=solid label="NOT_EQUALS"]
  41 -> 76 [style=solid label="LESS_THAN"]
  41 -> 77 [style=solid label="LESS_THAN_OR_EQUALS_TO"]
  41 -> 78 [style=solid label="GREATER_THAN"]
  41 -> 79 [style=solid label="GREATER_THAN_OR_EQUALS_TO"]
  42 [label="42\nexpr -> invoke ."]
  43 [label="43\nexpr -> primitive ."]
  44 [label="44\nfor_stm -> FOR LEFT_PARENTHESIS . init logicExprs END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  44 -> 2 [style=solid label="VAR"]
  44 -> 80 [style=dashed label="init"]
  45 [label="45\nif_stm -> IF logicExprs . LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET\nif_stm -> IF logicExprs . LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  45 -> 81 [style=solid label="LEFT_CURLYBRACKET"]
  46 [label="46\nfunc_stm -> FUNC ID . LEFT_PARENTHESIS assign_params RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  46 -> 82 [style=solid label="LEFT_PARENTHESIS"]
  47 [label="47\nexpr -> LEFT_PARENTHESIS . exprs RIGHT_PARENTHESIS"]
  47 -> 30 [style=solid label="ID"]
  47 -> 31 [style=solid label="SHORT"]
  47 -> 32 [style=solid label="INTEGER"]
  47 -> 33 [style=solid label="LONG"]
  47 -> 34 [style=solid label="FLOAT"]
  47 -> 35 [style=solid label="DOUBLE"]
  47 -> 36 [style=solid label="STRING"]
  47 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  47 -> 68 [style=dashed label="exprs"]
  47 -> 49 [style=dashed label="expr"]
  47 -> 42 [style=dashed label="invoke"]
  47 -> 43 [style=dashed label="primitive"]
  48 [label="48\nreturn -> RETURN exprs . END"]
  48 -> 83 [style=solid label="END"]
  49 [label="49\nexprs -> expr .\nexprs -> expr . ADDITION exprs\nexprs -> expr . SUBTRACTION exprs\nexprs -> expr . MULTIPLICATION exprs\nexprs -> expr . DIVISION exprs\nexprs -> expr . REMAINDER exprs\nexprs -> expr . POWER exprs\nexprs -> expr . PLUS_PLUS\nexprs -> expr . MINUS_MINUS"]
  49 -> 84 [style=solid label="ADDITION"]
  49 -> 85 [style=solid label="SUBTRACTION"]
  49 -> 86 [style=solid label="MULTIPLICATION"]
  49 -> 87 [style=solid label="DIVISION"]
  49 -> 88 [style=solid label="REMAINDER"]
  49 -> 89 [style=solid label="PLUS_PLUS"]
  49 -> 90 [style=solid label="MINUS_MINUS"]
  49 -> 91 [style=solid label="POWER"]
  50 [label="50\nprint_stm -> PRINT LEFT_PARENTHESIS . exprs RIGHT_PARENTHESIS END"]
  50 -> 30 [style=solid label="ID"]
  50 -> 31 [style=solid label="SHORT"]
  50 -> 32 [style=solid label="INTEGER"]
  50 -> 33 [style=solid label="LONG"]
  50 -> 34 [style=solid label="FLOAT"]
  50 -> 35 [style=solid label="DOUBLE"]
  50 -> 36 [style=solid label="STRING"]
  50 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  50 -> 92 [style=dashed label="exprs"]
  50 -> 49 [style=dashed label="expr"]
  50 -> 42 [style=dashed label="invoke"]
  50 -> 43 [style=dashed label="primitive"]
  51 [label="51\n$accept -> prog $end ."]
  52 [label="52\nsubprograms -> subprogram subprograms ."]
  53 [label="53\nstms -> stm stms ."]
  54 [label="54\nassign -> ID ASSIGN exprs . END"]
  54 -> 93 [style=solid label="END"]
  55 [label="55\nassign -> ID ADDITION_AND_ASSIGN exprs . END"]
  55 -> 94 [style=solid label="END"]
  56 [label="56\nassign -> ID SUBTRACTION_AND_ASSIGN exprs . END"]
  56 -> 95 [style=solid label="END"]
  57 [label="57\nassign -> ID MULTIPLICATION_AND_ASSIGN exprs . END"]
  57 -> 96 [style=solid label="END"]
  58 [label="58\nassign -> ID DIVISION_AND_ASSIGN exprs . END"]
  58 -> 97 [style=solid label="END"]
  59 [label="59\nassign -> ID REMAINDER_AND_ASSIGN exprs . END"]
  59 -> 98 [style=solid label="END"]
  60 [label="60\nassign -> ID LEFT_BRACKET exprs . RIGHT_BRACKET ASSIGN expr END"]
  60 -> 99 [style=solid label="RIGHT_BRACKET"]
  61 [label="61\ntype -> COLON . TYPE"]
  61 -> 100 [style=solid label="TYPE"]
  62 [label="62\ninit -> VAR ID type . ASSIGN exprs END\ninit -> VAR ID type . ASSIGN LEFT_BRACKET index RIGHT_BRACKET END"]
  62 -> 101 [style=solid label="ASSIGN"]
  63 [label="63\ninvoke -> ID LEFT_PARENTHESIS . params RIGHT_PARENTHESIS"]
  63 -> 30 [style=solid label="ID"]
  63 -> 31 [style=solid label="SHORT"]
  63 -> 32 [style=solid label="INTEGER"]
  63 -> 33 [style=solid label="LONG"]
  63 -> 34 [style=solid label="FLOAT"]
  63 -> 35 [style=solid label="DOUBLE"]
  63 -> 36 [style=solid label="STRING"]
  63 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  63 -> 102 [style=dashed label="params"]
  63 -> 103 [style=dashed label="exprs"]
  63 -> 49 [style=dashed label="expr"]
  63 -> 42 [style=dashed label="invoke"]
  63 -> 43 [style=dashed label="primitive"]
  64 [label="64\ndim -> LEFT_BRACKET . exprs RIGHT_BRACKET"]
  64 -> 30 [style=solid label="ID"]
  64 -> 31 [style=solid label="SHORT"]
  64 -> 32 [style=solid label="INTEGER"]
  64 -> 33 [style=solid label="LONG"]
  64 -> 34 [style=solid label="FLOAT"]
  64 -> 35 [style=solid label="DOUBLE"]
  64 -> 36 [style=solid label="STRING"]
  64 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  64 -> 104 [style=dashed label="exprs"]
  64 -> 49 [style=dashed label="expr"]
  64 -> 42 [style=dashed label="invoke"]
  64 -> 43 [style=dashed label="primitive"]
  65 [label="65\nexpr -> ID dims ."]
  66 [label="66\ndims -> dim .\ndims -> dim . dims"]
  66 -> 64 [style=solid label="LEFT_BRACKET"]
  66 -> 105 [style=dashed label="dims"]
  66 -> 66 [style=dashed label="dim"]
  67 [label="67\nlogicExpr -> LEFT_PARENTHESIS logicExprs . RIGHT_PARENTHESIS"]
  67 -> 106 [style=solid label="RIGHT_PARENTHESIS"]
  68 [label="68\nexpr -> LEFT_PARENTHESIS exprs . RIGHT_PARENTHESIS"]
  68 -> 107 [style=solid label="RIGHT_PARENTHESIS"]
  69 [label="69\nlogicExpr -> expr . EQUALS expr\nlogicExpr -> expr . NOT_EQUALS expr\nlogicExpr -> expr . GREATER_THAN expr\nlogicExpr -> expr . GREATER_THAN_OR_EQUALS_TO expr\nlogicExpr -> expr . LESS_THAN expr\nlogicExpr -> expr . LESS_THAN_OR_EQUALS_TO expr\nexprs -> expr .\nexprs -> expr . ADDITION exprs\nexprs -> expr . SUBTRACTION exprs\nexprs -> expr . MULTIPLICATION exprs\nexprs -> expr . DIVISION exprs\nexprs -> expr . REMAINDER exprs\nexprs -> expr . POWER exprs\nexprs -> expr . PLUS_PLUS\nexprs -> expr . MINUS_MINUS"]
  69 -> 84 [style=solid label="ADDITION"]
  69 -> 85 [style=solid label="SUBTRACTION"]
  69 -> 86 [style=solid label="MULTIPLICATION"]
  69 -> 87 [style=solid label="DIVISION"]
  69 -> 88 [style=solid label="REMAINDER"]
  69 -> 89 [style=solid label="PLUS_PLUS"]
  69 -> 90 [style=solid label="MINUS_MINUS"]
  69 -> 91 [style=solid label="POWER"]
  69 -> 74 [style=solid label="EQUALS"]
  69 -> 75 [style=solid label="NOT_EQUALS"]
  69 -> 76 [style=solid label="LESS_THAN"]
  69 -> 77 [style=solid label="LESS_THAN_OR_EQUALS_TO"]
  69 -> 78 [style=solid label="GREATER_THAN"]
  69 -> 79 [style=solid label="GREATER_THAN_OR_EQUALS_TO"]
  70 [label="70\nlogicExprs -> NOT logicExprs ."]
  71 [label="71\nwhile_stm -> WHILE logicExprs LEFT_CURLYBRACKET . stms RIGHT_CURLYBRACKET"]
  71 -> 1 [style=solid label="ID"]
  71 -> 2 [style=solid label="VAR"]
  71 -> 3 [style=solid label="WHILE"]
  71 -> 4 [style=solid label="FOR"]
  71 -> 5 [style=solid label="IF"]
  71 -> 6 [style=solid label="FUNC"]
  71 -> 7 [style=solid label="RETURN"]
  71 -> 8 [style=solid label="PRINT"]
  71 -> 108 [style=dashed label="stms"]
  71 -> 13 [style=dashed label="stm"]
  71 -> 14 [style=dashed label="print_stm"]
  71 -> 15 [style=dashed label="init"]
  71 -> 16 [style=dashed label="assign"]
  71 -> 17 [style=dashed label="return"]
  71 -> 18 [style=dashed label="if_stm"]
  71 -> 19 [style=dashed label="func_stm"]
  71 -> 20 [style=dashed label="for_stm"]
  71 -> 21 [style=dashed label="while_stm"]
  72 [label="72\nlogicExprs -> logicExpr OR . logicExprs"]
  72 -> 30 [style=solid label="ID"]
  72 -> 31 [style=solid label="SHORT"]
  72 -> 32 [style=solid label="INTEGER"]
  72 -> 33 [style=solid label="LONG"]
  72 -> 34 [style=solid label="FLOAT"]
  72 -> 35 [style=solid label="DOUBLE"]
  72 -> 36 [style=solid label="STRING"]
  72 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  72 -> 38 [style=solid label="NOT"]
  72 -> 109 [style=dashed label="logicExprs"]
  72 -> 40 [style=dashed label="logicExpr"]
  72 -> 41 [style=dashed label="expr"]
  72 -> 42 [style=dashed label="invoke"]
  72 -> 43 [style=dashed label="primitive"]
  73 [label="73\nlogicExprs -> logicExpr AND . logicExprs"]
  73 -> 30 [style=solid label="ID"]
  73 -> 31 [style=solid label="SHORT"]
  73 -> 32 [style=solid label="INTEGER"]
  73 -> 33 [style=solid label="LONG"]
  73 -> 34 [style=solid label="FLOAT"]
  73 -> 35 [style=solid label="DOUBLE"]
  73 -> 36 [style=solid label="STRING"]
  73 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  73 -> 38 [style=solid label="NOT"]
  73 -> 110 [style=dashed label="logicExprs"]
  73 -> 40 [style=dashed label="logicExpr"]
  73 -> 41 [style=dashed label="expr"]
  73 -> 42 [style=dashed label="invoke"]
  73 -> 43 [style=dashed label="primitive"]
  74 [label="74\nlogicExpr -> expr EQUALS . expr"]
  74 -> 30 [style=solid label="ID"]
  74 -> 31 [style=solid label="SHORT"]
  74 -> 32 [style=solid label="INTEGER"]
  74 -> 33 [style=solid label="LONG"]
  74 -> 34 [style=solid label="FLOAT"]
  74 -> 35 [style=solid label="DOUBLE"]
  74 -> 36 [style=solid label="STRING"]
  74 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  74 -> 111 [style=dashed label="expr"]
  74 -> 42 [style=dashed label="invoke"]
  74 -> 43 [style=dashed label="primitive"]
  75 [label="75\nlogicExpr -> expr NOT_EQUALS . expr"]
  75 -> 30 [style=solid label="ID"]
  75 -> 31 [style=solid label="SHORT"]
  75 -> 32 [style=solid label="INTEGER"]
  75 -> 33 [style=solid label="LONG"]
  75 -> 34 [style=solid label="FLOAT"]
  75 -> 35 [style=solid label="DOUBLE"]
  75 -> 36 [style=solid label="STRING"]
  75 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  75 -> 112 [style=dashed label="expr"]
  75 -> 42 [style=dashed label="invoke"]
  75 -> 43 [style=dashed label="primitive"]
  76 [label="76\nlogicExpr -> expr LESS_THAN . expr"]
  76 -> 30 [style=solid label="ID"]
  76 -> 31 [style=solid label="SHORT"]
  76 -> 32 [style=solid label="INTEGER"]
  76 -> 33 [style=solid label="LONG"]
  76 -> 34 [style=solid label="FLOAT"]
  76 -> 35 [style=solid label="DOUBLE"]
  76 -> 36 [style=solid label="STRING"]
  76 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  76 -> 113 [style=dashed label="expr"]
  76 -> 42 [style=dashed label="invoke"]
  76 -> 43 [style=dashed label="primitive"]
  77 [label="77\nlogicExpr -> expr LESS_THAN_OR_EQUALS_TO . expr"]
  77 -> 30 [style=solid label="ID"]
  77 -> 31 [style=solid label="SHORT"]
  77 -> 32 [style=solid label="INTEGER"]
  77 -> 33 [style=solid label="LONG"]
  77 -> 34 [style=solid label="FLOAT"]
  77 -> 35 [style=solid label="DOUBLE"]
  77 -> 36 [style=solid label="STRING"]
  77 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  77 -> 114 [style=dashed label="expr"]
  77 -> 42 [style=dashed label="invoke"]
  77 -> 43 [style=dashed label="primitive"]
  78 [label="78\nlogicExpr -> expr GREATER_THAN . expr"]
  78 -> 30 [style=solid label="ID"]
  78 -> 31 [style=solid label="SHORT"]
  78 -> 32 [style=solid label="INTEGER"]
  78 -> 33 [style=solid label="LONG"]
  78 -> 34 [style=solid label="FLOAT"]
  78 -> 35 [style=solid label="DOUBLE"]
  78 -> 36 [style=solid label="STRING"]
  78 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  78 -> 115 [style=dashed label="expr"]
  78 -> 42 [style=dashed label="invoke"]
  78 -> 43 [style=dashed label="primitive"]
  79 [label="79\nlogicExpr -> expr GREATER_THAN_OR_EQUALS_TO . expr"]
  79 -> 30 [style=solid label="ID"]
  79 -> 31 [style=solid label="SHORT"]
  79 -> 32 [style=solid label="INTEGER"]
  79 -> 33 [style=solid label="LONG"]
  79 -> 34 [style=solid label="FLOAT"]
  79 -> 35 [style=solid label="DOUBLE"]
  79 -> 36 [style=solid label="STRING"]
  79 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  79 -> 116 [style=dashed label="expr"]
  79 -> 42 [style=dashed label="invoke"]
  79 -> 43 [style=dashed label="primitive"]
  80 [label="80\nfor_stm -> FOR LEFT_PARENTHESIS init . logicExprs END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  80 -> 30 [style=solid label="ID"]
  80 -> 31 [style=solid label="SHORT"]
  80 -> 32 [style=solid label="INTEGER"]
  80 -> 33 [style=solid label="LONG"]
  80 -> 34 [style=solid label="FLOAT"]
  80 -> 35 [style=solid label="DOUBLE"]
  80 -> 36 [style=solid label="STRING"]
  80 -> 37 [style=solid label="LEFT_PARENTHESIS"]
  80 -> 38 [style=solid label="NOT"]
  80 -> 117 [style=dashed label="logicExprs"]
  80 -> 40 [style=dashed label="logicExpr"]
  80 -> 41 [style=dashed label="expr"]
  80 -> 42 [style=dashed label="invoke"]
  80 -> 43 [style=dashed label="primitive"]
  81 [label="81\nif_stm -> IF logicExprs LEFT_CURLYBRACKET . stms RIGHT_CURLYBRACKET\nif_stm -> IF logicExprs LEFT_CURLYBRACKET . stms RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  81 -> 1 [style=solid label="ID"]
  81 -> 2 [style=solid label="VAR"]
  81 -> 3 [style=solid label="WHILE"]
  81 -> 4 [style=solid label="FOR"]
  81 -> 5 [style=solid label="IF"]
  81 -> 6 [style=solid label="FUNC"]
  81 -> 7 [style=solid label="RETURN"]
  81 -> 8 [style=solid label="PRINT"]
  81 -> 118 [style=dashed label="stms"]
  81 -> 13 [style=dashed label="stm"]
  81 -> 14 [style=dashed label="print_stm"]
  81 -> 15 [style=dashed label="init"]
  81 -> 16 [style=dashed label="assign"]
  81 -> 17 [style=dashed label="return"]
  81 -> 18 [style=dashed label="if_stm"]
  81 -> 19 [style=dashed label="func_stm"]
  81 -> 20 [style=dashed label="for_stm"]
  81 -> 21 [style=dashed label="while_stm"]
  82 [label="82\nfunc_stm -> FUNC ID LEFT_PARENTHESIS . assign_params RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  82 -> 119 [style=solid label="ID"]
  82 -> 120 [style=dashed label="assign_params"]
  82 -> 121 [style=dashed label="assign_param"]
  83 [label="83\nreturn -> RETURN exprs END ."]
  84 [label="84\nexprs -> expr ADDITION . exprs"]
  84 -> 30 [style=solid label="ID"]
  84 -> 31 [style=solid label="SHORT"]
  84 -> 32 [style=solid label="INTEGER"]
  84 -> 33 [style=solid label="LONG"]
  84 -> 34 [style=solid label="FLOAT"]
  84 -> 35 [style=solid label="DOUBLE"]
  84 -> 36 [style=solid label="STRING"]
  84 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  84 -> 122 [style=dashed label="exprs"]
  84 -> 49 [style=dashed label="expr"]
  84 -> 42 [style=dashed label="invoke"]
  84 -> 43 [style=dashed label="primitive"]
  85 [label="85\nexprs -> expr SUBTRACTION . exprs"]
  85 -> 30 [style=solid label="ID"]
  85 -> 31 [style=solid label="SHORT"]
  85 -> 32 [style=solid label="INTEGER"]
  85 -> 33 [style=solid label="LONG"]
  85 -> 34 [style=solid label="FLOAT"]
  85 -> 35 [style=solid label="DOUBLE"]
  85 -> 36 [style=solid label="STRING"]
  85 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  85 -> 123 [style=dashed label="exprs"]
  85 -> 49 [style=dashed label="expr"]
  85 -> 42 [style=dashed label="invoke"]
  85 -> 43 [style=dashed label="primitive"]
  86 [label="86\nexprs -> expr MULTIPLICATION . exprs"]
  86 -> 30 [style=solid label="ID"]
  86 -> 31 [style=solid label="SHORT"]
  86 -> 32 [style=solid label="INTEGER"]
  86 -> 33 [style=solid label="LONG"]
  86 -> 34 [style=solid label="FLOAT"]
  86 -> 35 [style=solid label="DOUBLE"]
  86 -> 36 [style=solid label="STRING"]
  86 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  86 -> 124 [style=dashed label="exprs"]
  86 -> 49 [style=dashed label="expr"]
  86 -> 42 [style=dashed label="invoke"]
  86 -> 43 [style=dashed label="primitive"]
  87 [label="87\nexprs -> expr DIVISION . exprs"]
  87 -> 30 [style=solid label="ID"]
  87 -> 31 [style=solid label="SHORT"]
  87 -> 32 [style=solid label="INTEGER"]
  87 -> 33 [style=solid label="LONG"]
  87 -> 34 [style=solid label="FLOAT"]
  87 -> 35 [style=solid label="DOUBLE"]
  87 -> 36 [style=solid label="STRING"]
  87 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  87 -> 125 [style=dashed label="exprs"]
  87 -> 49 [style=dashed label="expr"]
  87 -> 42 [style=dashed label="invoke"]
  87 -> 43 [style=dashed label="primitive"]
  88 [label="88\nexprs -> expr REMAINDER . exprs"]
  88 -> 30 [style=solid label="ID"]
  88 -> 31 [style=solid label="SHORT"]
  88 -> 32 [style=solid label="INTEGER"]
  88 -> 33 [style=solid label="LONG"]
  88 -> 34 [style=solid label="FLOAT"]
  88 -> 35 [style=solid label="DOUBLE"]
  88 -> 36 [style=solid label="STRING"]
  88 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  88 -> 126 [style=dashed label="exprs"]
  88 -> 49 [style=dashed label="expr"]
  88 -> 42 [style=dashed label="invoke"]
  88 -> 43 [style=dashed label="primitive"]
  89 [label="89\nexprs -> expr PLUS_PLUS ."]
  90 [label="90\nexprs -> expr MINUS_MINUS ."]
  91 [label="91\nexprs -> expr POWER . exprs"]
  91 -> 30 [style=solid label="ID"]
  91 -> 31 [style=solid label="SHORT"]
  91 -> 32 [style=solid label="INTEGER"]
  91 -> 33 [style=solid label="LONG"]
  91 -> 34 [style=solid label="FLOAT"]
  91 -> 35 [style=solid label="DOUBLE"]
  91 -> 36 [style=solid label="STRING"]
  91 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  91 -> 127 [style=dashed label="exprs"]
  91 -> 49 [style=dashed label="expr"]
  91 -> 42 [style=dashed label="invoke"]
  91 -> 43 [style=dashed label="primitive"]
  92 [label="92\nprint_stm -> PRINT LEFT_PARENTHESIS exprs . RIGHT_PARENTHESIS END"]
  92 -> 128 [style=solid label="RIGHT_PARENTHESIS"]
  93 [label="93\nassign -> ID ASSIGN exprs END ."]
  94 [label="94\nassign -> ID ADDITION_AND_ASSIGN exprs END ."]
  95 [label="95\nassign -> ID SUBTRACTION_AND_ASSIGN exprs END ."]
  96 [label="96\nassign -> ID MULTIPLICATION_AND_ASSIGN exprs END ."]
  97 [label="97\nassign -> ID DIVISION_AND_ASSIGN exprs END ."]
  98 [label="98\nassign -> ID REMAINDER_AND_ASSIGN exprs END ."]
  99 [label="99\nassign -> ID LEFT_BRACKET exprs RIGHT_BRACKET . ASSIGN expr END"]
  99 -> 129 [style=solid label="ASSIGN"]
  100 [label="100\ntype -> COLON TYPE ."]
  101 [label="101\ninit -> VAR ID type ASSIGN . exprs END\ninit -> VAR ID type ASSIGN . LEFT_BRACKET index RIGHT_BRACKET END"]
  101 -> 30 [style=solid label="ID"]
  101 -> 31 [style=solid label="SHORT"]
  101 -> 32 [style=solid label="INTEGER"]
  101 -> 33 [style=solid label="LONG"]
  101 -> 34 [style=solid label="FLOAT"]
  101 -> 35 [style=solid label="DOUBLE"]
  101 -> 36 [style=solid label="STRING"]
  101 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  101 -> 130 [style=solid label="LEFT_BRACKET"]
  101 -> 131 [style=dashed label="exprs"]
  101 -> 49 [style=dashed label="expr"]
  101 -> 42 [style=dashed label="invoke"]
  101 -> 43 [style=dashed label="primitive"]
  102 [label="102\ninvoke -> ID LEFT_PARENTHESIS params . RIGHT_PARENTHESIS"]
  102 -> 132 [style=solid label="RIGHT_PARENTHESIS"]
  103 [label="103\nparams -> exprs .\nparams -> exprs . COMMA params"]
  103 -> 133 [style=solid label="COMMA"]
  104 [label="104\ndim -> LEFT_BRACKET exprs . RIGHT_BRACKET"]
  104 -> 134 [style=solid label="RIGHT_BRACKET"]
  105 [label="105\ndims -> dim dims ."]
  106 [label="106\nlogicExpr -> LEFT_PARENTHESIS logicExprs RIGHT_PARENTHESIS ."]
  107 [label="107\nexpr -> LEFT_PARENTHESIS exprs RIGHT_PARENTHESIS ."]
  108 [label="108\nwhile_stm -> WHILE logicExprs LEFT_CURLYBRACKET stms . RIGHT_CURLYBRACKET"]
  108 -> 135 [style=solid label="RIGHT_CURLYBRACKET"]
  109 [label="109\nlogicExprs -> logicExpr OR logicExprs ."]
  110 [label="110\nlogicExprs -> logicExpr AND logicExprs ."]
  111 [label="111\nlogicExpr -> expr EQUALS expr ."]
  112 [label="112\nlogicExpr -> expr NOT_EQUALS expr ."]
  113 [label="113\nlogicExpr -> expr LESS_THAN expr ."]
  114 [label="114\nlogicExpr -> expr LESS_THAN_OR_EQUALS_TO expr ."]
  115 [label="115\nlogicExpr -> expr GREATER_THAN expr ."]
  116 [label="116\nlogicExpr -> expr GREATER_THAN_OR_EQUALS_TO expr ."]
  117 [label="117\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs . END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  117 -> 136 [style=solid label="END"]
  118 [label="118\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms . RIGHT_CURLYBRACKET\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms . RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  118 -> 137 [style=solid label="RIGHT_CURLYBRACKET"]
  119 [label="119\nassign_param -> ID . type\nassign_param -> ID . COLON LEFT_BRACKET TYPE RIGHT_BRACKET"]
  119 -> 138 [style=solid label="COLON"]
  119 -> 139 [style=dashed label="type"]
  120 [label="120\nfunc_stm -> FUNC ID LEFT_PARENTHESIS assign_params . RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  120 -> 140 [style=solid label="RIGHT_PARENTHESIS"]
  121 [label="121\nassign_params -> assign_param .\nassign_params -> assign_param . COMMA assign_params"]
  121 -> 141 [style=solid label="COMMA"]
  122 [label="122\nexprs -> expr ADDITION exprs ."]
  123 [label="123\nexprs -> expr SUBTRACTION exprs ."]
  124 [label="124\nexprs -> expr MULTIPLICATION exprs ."]
  125 [label="125\nexprs -> expr DIVISION exprs ."]
  126 [label="126\nexprs -> expr REMAINDER exprs ."]
  127 [label="127\nexprs -> expr POWER exprs ."]
  128 [label="128\nprint_stm -> PRINT LEFT_PARENTHESIS exprs RIGHT_PARENTHESIS . END"]
  128 -> 142 [style=solid label="END"]
  129 [label="129\nassign -> ID LEFT_BRACKET exprs RIGHT_BRACKET ASSIGN . expr END"]
  129 -> 30 [style=solid label="ID"]
  129 -> 31 [style=solid label="SHORT"]
  129 -> 32 [style=solid label="INTEGER"]
  129 -> 33 [style=solid label="LONG"]
  129 -> 34 [style=solid label="FLOAT"]
  129 -> 35 [style=solid label="DOUBLE"]
  129 -> 36 [style=solid label="STRING"]
  129 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  129 -> 143 [style=dashed label="expr"]
  129 -> 42 [style=dashed label="invoke"]
  129 -> 43 [style=dashed label="primitive"]
  130 [label="130\ninit -> VAR ID type ASSIGN LEFT_BRACKET . index RIGHT_BRACKET END"]
  130 -> 30 [style=solid label="ID"]
  130 -> 31 [style=solid label="SHORT"]
  130 -> 32 [style=solid label="INTEGER"]
  130 -> 33 [style=solid label="LONG"]
  130 -> 34 [style=solid label="FLOAT"]
  130 -> 35 [style=solid label="DOUBLE"]
  130 -> 36 [style=solid label="STRING"]
  130 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  130 -> 144 [style=dashed label="index"]
  130 -> 145 [style=dashed label="exprs"]
  130 -> 49 [style=dashed label="expr"]
  130 -> 42 [style=dashed label="invoke"]
  130 -> 43 [style=dashed label="primitive"]
  131 [label="131\ninit -> VAR ID type ASSIGN exprs . END"]
  131 -> 146 [style=solid label="END"]
  132 [label="132\ninvoke -> ID LEFT_PARENTHESIS params RIGHT_PARENTHESIS ."]
  133 [label="133\nparams -> exprs COMMA . params"]
  133 -> 30 [style=solid label="ID"]
  133 -> 31 [style=solid label="SHORT"]
  133 -> 32 [style=solid label="INTEGER"]
  133 -> 33 [style=solid label="LONG"]
  133 -> 34 [style=solid label="FLOAT"]
  133 -> 35 [style=solid label="DOUBLE"]
  133 -> 36 [style=solid label="STRING"]
  133 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  133 -> 147 [style=dashed label="params"]
  133 -> 103 [style=dashed label="exprs"]
  133 -> 49 [style=dashed label="expr"]
  133 -> 42 [style=dashed label="invoke"]
  133 -> 43 [style=dashed label="primitive"]
  134 [label="134\ndim -> LEFT_BRACKET exprs RIGHT_BRACKET ."]
  135 [label="135\nwhile_stm -> WHILE logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ."]
  136 [label="136\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs END . exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  136 -> 30 [style=solid label="ID"]
  136 -> 31 [style=solid label="SHORT"]
  136 -> 32 [style=solid label="INTEGER"]
  136 -> 33 [style=solid label="LONG"]
  136 -> 34 [style=solid label="FLOAT"]
  136 -> 35 [style=solid label="DOUBLE"]
  136 -> 36 [style=solid label="STRING"]
  136 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  136 -> 148 [style=dashed label="exprs"]
  136 -> 49 [style=dashed label="expr"]
  136 -> 42 [style=dashed label="invoke"]
  136 -> 43 [style=dashed label="primitive"]
  137 [label="137\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET .\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET . ELSE LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  137 -> 149 [style=solid label="ELSE"]
  138 [label="138\ntype -> COLON . TYPE\nassign_param -> ID COLON . LEFT_BRACKET TYPE RIGHT_BRACKET"]
  138 -> 100 [style=solid label="TYPE"]
  138 -> 150 [style=solid label="LEFT_BRACKET"]
  139 [label="139\nassign_param -> ID type ."]
  140 [label="140\nfunc_stm -> FUNC ID LEFT_PARENTHESIS assign_params RIGHT_PARENTHESIS . LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  140 -> 151 [style=solid label="LEFT_CURLYBRACKET"]
  141 [label="141\nassign_params -> assign_param COMMA . assign_params"]
  141 -> 119 [style=solid label="ID"]
  141 -> 152 [style=dashed label="assign_params"]
  141 -> 121 [style=dashed label="assign_param"]
  142 [label="142\nprint_stm -> PRINT LEFT_PARENTHESIS exprs RIGHT_PARENTHESIS END ."]
  143 [label="143\nassign -> ID LEFT_BRACKET exprs RIGHT_BRACKET ASSIGN expr . END"]
  143 -> 153 [style=solid label="END"]
  144 [label="144\ninit -> VAR ID type ASSIGN LEFT_BRACKET index . RIGHT_BRACKET END"]
  144 -> 154 [style=solid label="RIGHT_BRACKET"]
  145 [label="145\nindex -> exprs .\nindex -> exprs . COMMA index"]
  145 -> 155 [style=solid label="COMMA"]
  146 [label="146\ninit -> VAR ID type ASSIGN exprs END ."]
  147 [label="147\nparams -> exprs COMMA params ."]
  148 [label="148\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs END exprs . RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  148 -> 156 [style=solid label="RIGHT_PARENTHESIS"]
  149 [label="149\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ELSE . LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  149 -> 157 [style=solid label="LEFT_CURLYBRACKET"]
  150 [label="150\nassign_param -> ID COLON LEFT_BRACKET . TYPE RIGHT_BRACKET"]
  150 -> 158 [style=solid label="TYPE"]
  151 [label="151\nfunc_stm -> FUNC ID LEFT_PARENTHESIS assign_params RIGHT_PARENTHESIS LEFT_CURLYBRACKET . stms RIGHT_CURLYBRACKET"]
  151 -> 1 [style=solid label="ID"]
  151 -> 2 [style=solid label="VAR"]
  151 -> 3 [style=solid label="WHILE"]
  151 -> 4 [style=solid label="FOR"]
  151 -> 5 [style=solid label="IF"]
  151 -> 6 [style=solid label="FUNC"]
  151 -> 7 [style=solid label="RETURN"]
  151 -> 8 [style=solid label="PRINT"]
  151 -> 159 [style=dashed label="stms"]
  151 -> 13 [style=dashed label="stm"]
  151 -> 14 [style=dashed label="print_stm"]
  151 -> 15 [style=dashed label="init"]
  151 -> 16 [style=dashed label="assign"]
  151 -> 17 [style=dashed label="return"]
  151 -> 18 [style=dashed label="if_stm"]
  151 -> 19 [style=dashed label="func_stm"]
  151 -> 20 [style=dashed label="for_stm"]
  151 -> 21 [style=dashed label="while_stm"]
  152 [label="152\nassign_params -> assign_param COMMA assign_params ."]
  153 [label="153\nassign -> ID LEFT_BRACKET exprs RIGHT_BRACKET ASSIGN expr END ."]
  154 [label="154\ninit -> VAR ID type ASSIGN LEFT_BRACKET index RIGHT_BRACKET . END"]
  154 -> 160 [style=solid label="END"]
  155 [label="155\nindex -> exprs COMMA . index"]
  155 -> 30 [style=solid label="ID"]
  155 -> 31 [style=solid label="SHORT"]
  155 -> 32 [style=solid label="INTEGER"]
  155 -> 33 [style=solid label="LONG"]
  155 -> 34 [style=solid label="FLOAT"]
  155 -> 35 [style=solid label="DOUBLE"]
  155 -> 36 [style=solid label="STRING"]
  155 -> 47 [style=solid label="LEFT_PARENTHESIS"]
  155 -> 161 [style=dashed label="index"]
  155 -> 145 [style=dashed label="exprs"]
  155 -> 49 [style=dashed label="expr"]
  155 -> 42 [style=dashed label="invoke"]
  155 -> 43 [style=dashed label="primitive"]
  156 [label="156\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs END exprs RIGHT_PARENTHESIS . LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET"]
  156 -> 162 [style=solid label="LEFT_CURLYBRACKET"]
  157 [label="157\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET . stms RIGHT_CURLYBRACKET"]
  157 -> 1 [style=solid label="ID"]
  157 -> 2 [style=solid label="VAR"]
  157 -> 3 [style=solid label="WHILE"]
  157 -> 4 [style=solid label="FOR"]
  157 -> 5 [style=solid label="IF"]
  157 -> 6 [style=solid label="FUNC"]
  157 -> 7 [style=solid label="RETURN"]
  157 -> 8 [style=solid label="PRINT"]
  157 -> 163 [style=dashed label="stms"]
  157 -> 13 [style=dashed label="stm"]
  157 -> 14 [style=dashed label="print_stm"]
  157 -> 15 [style=dashed label="init"]
  157 -> 16 [style=dashed label="assign"]
  157 -> 17 [style=dashed label="return"]
  157 -> 18 [style=dashed label="if_stm"]
  157 -> 19 [style=dashed label="func_stm"]
  157 -> 20 [style=dashed label="for_stm"]
  157 -> 21 [style=dashed label="while_stm"]
  158 [label="158\nassign_param -> ID COLON LEFT_BRACKET TYPE . RIGHT_BRACKET"]
  158 -> 164 [style=solid label="RIGHT_BRACKET"]
  159 [label="159\nfunc_stm -> FUNC ID LEFT_PARENTHESIS assign_params RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms . RIGHT_CURLYBRACKET"]
  159 -> 165 [style=solid label="RIGHT_CURLYBRACKET"]
  160 [label="160\ninit -> VAR ID type ASSIGN LEFT_BRACKET index RIGHT_BRACKET END ."]
  161 [label="161\nindex -> exprs COMMA index ."]
  162 [label="162\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET . stms RIGHT_CURLYBRACKET"]
  162 -> 1 [style=solid label="ID"]
  162 -> 2 [style=solid label="VAR"]
  162 -> 3 [style=solid label="WHILE"]
  162 -> 4 [style=solid label="FOR"]
  162 -> 5 [style=solid label="IF"]
  162 -> 6 [style=solid label="FUNC"]
  162 -> 7 [style=solid label="RETURN"]
  162 -> 8 [style=solid label="PRINT"]
  162 -> 166 [style=dashed label="stms"]
  162 -> 13 [style=dashed label="stm"]
  162 -> 14 [style=dashed label="print_stm"]
  162 -> 15 [style=dashed label="init"]
  162 -> 16 [style=dashed label="assign"]
  162 -> 17 [style=dashed label="return"]
  162 -> 18 [style=dashed label="if_stm"]
  162 -> 19 [style=dashed label="func_stm"]
  162 -> 20 [style=dashed label="for_stm"]
  162 -> 21 [style=dashed label="while_stm"]
  163 [label="163\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET stms . RIGHT_CURLYBRACKET"]
  163 -> 167 [style=solid label="RIGHT_CURLYBRACKET"]
  164 [label="164\nassign_param -> ID COLON LEFT_BRACKET TYPE RIGHT_BRACKET ."]
  165 [label="165\nfunc_stm -> FUNC ID LEFT_PARENTHESIS assign_params RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ."]
  166 [label="166\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms . RIGHT_CURLYBRACKET"]
  166 -> 168 [style=solid label="RIGHT_CURLYBRACKET"]
  167 [label="167\nif_stm -> IF logicExprs LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ELSE LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ."]
  168 [label="168\nfor_stm -> FOR LEFT_PARENTHESIS init logicExprs END exprs RIGHT_PARENTHESIS LEFT_CURLYBRACKET stms RIGHT_CURLYBRACKET ."]
}
